# Fastfile for Murmur automation

require "shellwords"

default_platform(:ios)

platform :ios do
  # =================
  # Testing Lanes
  # =================

  desc "Run unit tests with code coverage\n(<1 min, iPhone 17 Pro)"
  lane :test do
    UI.header("Unit Tests")
    UI.message("Running unit tests with code coverage...")

    scan(
      scheme: "Murmur",
      device: "iPhone 17 Pro",
      code_coverage: true,
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Unit tests passed")
  end

  desc "Run UI tests on iPhone and iPad\n(2-3 mins, 2 devices)"
  lane :test_ui do
    UI.header("UI Tests - Standard Devices")
    UI.message("Testing on: iPhone 17 Pro, iPad Pro 13-inch (M4)")

    scan(
      scheme: "MurmurUITests",
      devices: ["iPhone 17 Pro", "iPad Pro 13-inch (M4)"],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ UI tests passed on standard devices")
  end

  desc "Run UI tests across 5 devices including multiple iPhone and iPad models\n(8-12 mins)"
  lane :test_ui_full do
    UI.header("UI Tests - Full Device Coverage")
    UI.message("Testing across 5 devices (iPhones and iPads)...")
    UI.message("⏱  Note: This will take 8-12 minutes")

    scan(
      scheme: "MurmurUITests",
      devices: [
        "iPhone 17 Pro",
        "iPhone 16 Pro",
        "iPhone 15 Pro",
        "iPad Pro 13-inch (M4)",
        "iPad mini (A17 Pro)"
      ],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ UI tests passed on all devices")
  end

  desc "Run smoke tests for critical user journeys\n(~1 min, iPhone 17 Pro)"
  lane :test_smoke do
    UI.header("Smoke Tests - Critical User Journeys")
    UI.message("Running quick validation of core functionality...")

    scan(
      scheme: "MurmurUITests",
      only_testing: [
        "MurmurUITests/UserJourneyTests/testCompleteSymptomEntry",
        "MurmurUITests/UserJourneyTests/testNavigateToDayDetail",
        "MurmurUITests/UserJourneyTests/testViewTrendsChart",
        "MurmurUITests/UserJourneyTests/testAddSymptomType"
      ],
      devices: ["iPhone 17 Pro"],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Smoke tests passed - core functionality working")
  end

  # =================
  # Granular Test Lanes
  # =================
  #
  # These lanes allow targeted testing of specific features
  # added during the test suite renovation

  desc "Run widget tests\n(<1 min, iPhone 17 Pro)"
  lane :test_widgets do
    UI.header("Widget Tests")
    UI.message("Testing widget functionality and intents...")

    scan(
      scheme: "Murmur",
      only_testing: ["MurmurWidgetTests"],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Widget tests passed")
  end

  desc "Run UnifiedEventView tests\n(<1 min, iPhone 17 Pro)"
  lane :test_unified_event do
    UI.header("UnifiedEventView Tests")
    UI.message("Testing unified event entry screen...")

    scan(
      scheme: "Murmur",
      only_testing: ["MurmurTests/UnifiedEventViewTests"],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ UnifiedEventView tests passed")
  end

  desc "Run App Intents tests\n(<1 min, iPhone 17 Pro)"
  lane :test_intents do
    UI.header("App Intents Tests")
    UI.message("Testing Siri shortcuts and app intents...")

    scan(
      scheme: "Murmur",
      only_testing: ["MurmurTests/AppIntentsTests"],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ App Intents tests passed")
  end

  desc "Run background tasks tests\n(<1 min, iPhone 17 Pro)"
  lane :test_background do
    UI.header("Background Tasks Tests")
    UI.message("Testing auto-backup and background operations...")

    scan(
      scheme: "Murmur",
      only_testing: ["MurmurTests/BackgroundTasksTests"],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Background tasks tests passed")
  end

  desc "Run all new feature tests: widgets, unified event, intents, background\n(2-3 mins)"
  lane :test_new_features do
    UI.header("New Feature Tests")
    UI.message("Testing all recently added features...")
    UI.message("  1. Widget tests")
    UI.message("  2. UnifiedEventView tests")
    UI.message("  3. App Intents tests")
    UI.message("  4. Background Tasks tests")

    test_widgets
    test_unified_event
    test_intents
    test_background

    UI.success("✓ All new feature tests passed")
  end

  desc "Run core data tests\n(<1 min, iPhone 17 Pro)"
  lane :test_core_data do
    UI.header("Core Data Tests")
    UI.message("Testing data models and migrations...")

    scan(
      scheme: "Murmur",
      only_testing: [
        "MurmurTests/CoreDataMigrationTests",
        "MurmurTests/EventTests",
        "MurmurTests/SymptomEntryCreationTests",
        "MurmurTests/DaySummaryTests"
      ],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Core Data tests passed")
  end

  desc "Run analysis engine tests\n(<1 min, iPhone 17 Pro)"
  lane :test_analysis do
    UI.header("Analysis Engine Tests")
    UI.message("Testing trend detection and correlations...")

    scan(
      scheme: "Murmur",
      only_testing: [
        "MurmurTests/AnalysisEngineTests",
        "MurmurTests/CalendarHeatMapTests",
        "MurmurTests/LoadCalculatorTests",
        "MurmurTests/LoadScoreTests"
      ],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Analysis engine tests passed")
  end

  desc "Run location and calendar tests\n(<1 min, iPhone 17 Pro)"
  lane :test_integrations do
    UI.header("Integration Tests")
    UI.message("Testing location and calendar integrations...")

    scan(
      scheme: "Murmur",
      only_testing: [
        "MurmurTests/LocationAssistantTests",
        "MurmurTests/CalendarAssistantTests",
        "MurmurTests/NotificationSchedulerTests"
      ],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Integration tests passed")
  end

  # =================
  # HealthKit Testing
  # =================
  #
  # HealthKit integration tests verify the app correctly displays and processes
  # synthetic health data from the HealthKitUtility library. Tests use deterministic
  # seeds to ensure reproducible results across runs.

  desc "Run HealthKit integration tests with 7 days of synthetic data\n(1-2 mins)"
  lane :test_healthkit do
    UI.header("HealthKit Integration Tests - Normal Profile")
    UI.message("Testing: 7 days of synthetic health data with normal profile")
    UI.message("Device: iPhone 17 Pro")

    scan(
      scheme: "MurmurUITests",
      only_testing: ["MurmurUITests/HealthKitIntegrationTests"],
      devices: ["iPhone 17 Pro"],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ HealthKit integration tests passed")
  end

  desc "Run HealthKit integration tests with 30 days of synthetic data\n(3-5 mins)"
  lane :test_healthkit_extended do
    UI.header("HealthKit Integration Tests - Extended Historical Data")
    UI.message("Testing: 30 days of synthetic health data")
    UI.message("Device: iPhone 17 Pro")
    UI.message("⏱  Note: This will take longer due to extended data seeding")

    scan(
      scheme: "MurmurUITests",
      only_testing: [
        "MurmurUITests/HealthKitIntegrationTests/testAppWithExtendedHistoricalData"
      ],
      devices: ["iPhone 17 Pro"],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Extended historical data tests passed")
  end

  desc "Verify deterministic data generation with seed=42\n(~1 min)"
  lane :test_healthkit_deterministic do
    UI.header("HealthKit Deterministic Fixture Tests")
    UI.message("Testing: Deterministic data generation with seed=42")
    UI.message("Device: iPhone 17 Pro")
    UI.message("Verifying: UI values match expected fixture data exactly")

    scan(
      scheme: "MurmurUITests",
      only_testing: [
        "MurmurUITests/HealthKitIntegrationTests/testHealthMetricsMatchDeterministicFixture"
      ],
      devices: ["iPhone 17 Pro"],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ Deterministic fixture tests passed - data generation is reproducible")
  end

  desc "Run unit tests for HealthKitUtility synthetic data library\n(<30 secs)"
  lane :test_healthkit_utility do
    UI.header("HealthKitUtility Library Smoke Tests")
    UI.message("Testing: Synthetic data library in isolation")
    UI.message("Device: iPhone 17 Pro")
    UI.message("Test suite: MurmurTests (unit tests)")

    scan(
      scheme: "Murmur",
      only_testing: ["MurmurTests/HealthKitUtilitySmokeTests"],
      device: "iPhone 17 Pro",
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("✓ HealthKitUtility smoke tests passed - library working correctly")
  end

  desc "Run all HealthKit tests: utility + integration + deterministic + extended\n(5-8 mins)"
  lane :test_healthkit_full do
    UI.header("Comprehensive HealthKit Test Suite")
    UI.message("Running all HealthKit tests in sequence:")
    UI.message("  1. HealthKitUtility smoke tests")
    UI.message("  2. Normal integration tests")
    UI.message("  3. Deterministic fixture tests")
    UI.message("  4. Extended historical data tests")
    UI.message("")
    UI.message("⏱  Estimated duration: 5-8 minutes")

    test_healthkit_utility
    test_healthkit
    test_healthkit_deterministic
    test_healthkit_extended

    UI.success("✓ All HealthKit tests passed successfully")
  end

  desc "Run standard test suite: unit + UI + HealthKit integration\n(3-5 mins)"
  lane :test_all do
    UI.header("Standard Test Suite")
    UI.message("Running: Unit tests → UI tests → HealthKit integration")

    test
    test_ui
    test_healthkit

    UI.success("✓ All standard tests passed")
  end

  desc "Run complete test suite: unit + UI + full HealthKit\n(10-15 mins)"
  lane :test_complete do
    UI.header("Complete Test Suite")
    UI.message("Running comprehensive test suite:")
    UI.message("  - All unit tests")
    UI.message("  - All UI tests")
    UI.message("  - Full HealthKit test suite")
    UI.message("")
    UI.message("⏱  Estimated duration: 10-15 minutes")

    test
    test_ui
    test_healthkit_full

    UI.success("✓ Complete test suite passed - app is ready for release")
  end

  # =================
  # Screenshot Lanes
  # =================

  desc "Generate screenshots for App Store\n(standard devices)"
  lane :screenshots do
    snapshot(scheme: "MurmurUITests")
  end

  desc "Generate screenshots with device frames"
  lane :screenshots_framed do
    snapshot(
      scheme: "MurmurUITests",
      devices: ["iPhone 16 Pro Max", "iPhone 15 Pro", "iPhone 13"],
      languages: ["en-AU"],
      output_directory: "./fastlane-output/screenshots-framed",
      clear_previous_screenshots: true,
      override_status_bar: true,
      override_status_bar_arguments: "--time 2025-05-09T09:41:00+10:30 --dataNetwork '5g-uwb' --cellularMode 'active' --cellularBars 3 --operatorName 'Telecom Australia' --batteryState 'discharging' --batteryLevel 80",
      only_testing: ["MurmurUITests/MurmurUITests/testGenerateScreenshots"],
      stop_after_first_error: false,
      number_of_retries: 3,
      erase_simulator: true,
      reinstall_app: true
    )
  end

  desc "Add device frames to screenshots"
  lane :add_frames do
    frameit(
      path: "./fastlane-output/screenshots-framed",
      silver: true
    )
  end

  desc "Generate and resize screenshots for App Store"
  lane :prepare_screenshots do
    screenshots
    resize_screenshots
  end

  desc "Generate framed screenshots ready for App Store"
  lane :prepare_framed_screenshots do
    screenshots_framed
    resize_screenshots_framed
    add_frames
  end

  # =================
  # Helper Lanes
  # =================

  desc "Resize screenshots for App Store Connect"
  lane :resize_screenshots do
    resize_screenshot_helper(directory: "./fastlane-output/screenshots")
  end

  desc "Resize framed screenshots for App Store Connect"
  lane :resize_screenshots_framed do
    resize_screenshot_helper(directory: "./fastlane-output/screenshots-framed")
  end

  desc "Clean test outputs and screenshots"
  lane :clean do
    UI.message("Cleaning fastlane outputs...")
    sh("rm", "-rf", "../fastlane-output") rescue nil
    sh("rm", "-rf", "test_output") rescue nil
    sh("rm", "-f", "report.xml") rescue nil
    UI.success("Cleaned fastlane outputs")
  end

  # =================
  # Private Helpers
  # =================

  private_lane :resize_screenshot_helper do |options|
    screenshot_dir = File.expand_path("../#{options[:directory]}", __dir__)
    files = Dir.glob("#{screenshot_dir}/**/iPhone*.png").reject { |path| path.include?("/framed/") }

    if files.empty?
      UI.error("No iPhone screenshots found in #{screenshot_dir}")
      next
    end

    target_width = 1284
    target_height = 2778
    resized_count = 0

    files.each do |file|
      info = `sips -g pixelWidth -g pixelHeight #{Shellwords.escape(file)}`
      width = info[/pixelWidth:\s+(\d+)/, 1].to_i
      height = info[/pixelHeight:\s+(\d+)/, 1].to_i

      if width.zero? || height.zero?
        UI.error("Unable to read dimensions for #{file}")
        next
      end

      if width <= target_width && height <= target_height
        UI.message("Skipping #{File.basename(file)} (#{width}x#{height}) - already within target size")
        next
      end

      UI.message("Resizing #{File.basename(file)} from #{width}x#{height} to #{target_width}x#{target_height}")
      sh("sips", "-z", target_height.to_s, target_width.to_s, file)
      resized_count += 1
    end

    if resized_count.positive?
      UI.success("Resized #{resized_count} iPhone screenshot#{resized_count == 1 ? '' : 's'} to #{target_width}x#{target_height}")
    else
      UI.message("No screenshots required resizing")
    end
  end
end
