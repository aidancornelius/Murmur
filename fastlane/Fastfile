# Fastfile for Murmur automation

require "shellwords"

default_platform(:ios)

platform :ios do
  desc "Generate screenshots for App Store Connect (latest devices)"
  lane :screenshots do
    snapshot(scheme: "MurmurUITests")
  end

  desc "Generate screenshots with devices that support frames"
  lane :screenshots_framed do
    snapshot(
      scheme: "MurmurUITests",
      devices: [
        "iPhone 16 Pro Max",
        "iPhone 15 Pro",
        "iPhone 13"
      ],
      languages: ["en-AU"],
      output_directory: "./fastlane-output/screenshots-framed",
      clear_previous_screenshots: true,
      override_status_bar: true,
      override_status_bar_arguments: "--time 2025-05-09T09:41:00+10:30 --dataNetwork '5g-uwb' --cellularMode 'active' --cellularBars 3 --operatorName 'Telecom Australia' --batteryState 'discharging' --batteryLevel 80",
      only_testing: ["MurmurUITests/MurmurUITests/testGenerateScreenshots"],
      stop_after_first_error: false,
      number_of_retries: 3,
      erase_simulator: true,
      reinstall_app: true
    )
  end

  desc "Frame screenshots with device frames"
  lane :add_frames do
    frameit(
      path: "./fastlane-output/screenshots-framed",
      silver: true
    )
  end

  desc "Generate, resize, and frame screenshots for App Store"
  lane :prepare_screenshots do
    screenshots
    resize_screenshots
  end

  desc "Generate framed screenshots ready for App Store"
  lane :prepare_framed_screenshots do
    screenshots_framed
    # Resize if needed
    resize_screenshots_framed
    add_frames
  end

  desc "Resize iPhone screenshots for App Store Connect"
  lane :resize_screenshots do
    resize_screenshot_helper(directory: "./fastlane-output/screenshots")
  end

  desc "Resize framed screenshots for App Store Connect"
  lane :resize_screenshots_framed do
    resize_screenshot_helper(directory: "./fastlane-output/screenshots-framed")
  end

  # Helper method for resizing screenshots
  private_lane :resize_screenshot_helper do |options|
    screenshot_dir = File.expand_path("../#{options[:directory]}", __dir__)
    files = Dir.glob("#{screenshot_dir}/**/iPhone*.png").reject { |path| path.include?("/framed/") }

    if files.empty?
      UI.error("No iPhone screenshots found in #{screenshot_dir}")
      next
    end

    target_width = 1284
    target_height = 2778
    resized_count = 0

    files.each do |file|
      info = `sips -g pixelWidth -g pixelHeight #{Shellwords.escape(file)}`
      width = info[/pixelWidth:\s+(\d+)/, 1].to_i
      height = info[/pixelHeight:\s+(\d+)/, 1].to_i

      if width.zero? || height.zero?
        UI.error("Unable to read dimensions for #{file}")
        next
      end

      if width <= target_width && height <= target_height
        UI.message("Skipping #{File.basename(file)} (#{width}x#{height}) - already within target size")
        next
      end

      UI.message("Resizing #{File.basename(file)} from #{width}x#{height} to #{target_width}x#{target_height}")
      sh("sips", "-z", target_height.to_s, target_width.to_s, file)
      resized_count += 1
    end

    if resized_count.positive?
      UI.success("Resized #{resized_count} iPhone screenshot#{resized_count == 1 ? '' : 's'} to #{target_width}x#{target_height}")
    else
      UI.message("No screenshots required resizing")
    end
  end

  # UI Testing lanes

  desc "Run full UI test suite on multiple devices and iOS versions"
  lane :ui_tests do
    scan(
      scheme: "MurmurUITests",
      devices: [
        "iPhone 17 Pro (26.0)",
        "iPhone 17 Pro (18.4)",
        "iPhone 13 mini (18.4)",
        "iPad Pro (13-inch) (M4) (26.0)",
        "iPad Pro (13-inch) (M4) (18.4)",
        "iPad mini (A17 Pro) (26.0)"
      ],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )
  end

  desc "Run UI tests on iPhone only (faster)"
  lane :ui_tests_iphone do
    scan(
      scheme: "MurmurUITests",
      devices: [
        "iPhone 17 Pro (26.0)",
        "iPhone 13 mini (18.4)"
      ],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )
  end

  desc "Quick smoke test of critical user journeys"
  lane :ui_smoke do
    scan(
      scheme: "MurmurUITests",
      only_testing: [
        "MurmurUITests/UserJourneyTests/testCompleteSymptomEntry",
        "MurmurUITests/UserJourneyTests/testNavigateToDayDetail",
        "MurmurUITests/UserJourneyTests/testViewTrendsChart",
        "MurmurUITests/UserJourneyTests/testAddSymptomType"
      ],
      devices: ["iPhone 17 Pro (26.0)"],
      result_bundle: true
    )
  end

  desc "Run UI tests with step-by-step screenshots for visual verification"
  lane :ui_tests_visual do
    UI.important("ðŸ“¸ To capture step-by-step screenshots:")
    UI.message("1. Edit MurmurUITests scheme in Xcode")
    UI.message("2. Go to Run â†’ Arguments")
    UI.message("3. Enable the -CaptureTestScreenshots checkbox")
    UI.message("4. Save and re-run this lane")
    UI.message("")
    UI.message("Running tests now...")

    scan(
      scheme: "MurmurUITests",
      devices: ["iPhone 17 Pro (26.0)"],
      result_bundle: true,
      output_directory: "./fastlane-output/test-reports"
    )

    UI.success("Visual test run complete!")
    UI.message("Open the .xcresult bundle to view screenshots:")
    UI.message("â†’ fastlane-output/test-reports/MurmurUITests.xcresult")
  end
end
