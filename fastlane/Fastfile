# Fastfile for Murmur automation

require "shellwords"

default_platform(:ios)

platform :ios do
  desc "Generate screenshots for App Store Connect"
  lane :screenshots do
    snapshot(scheme: "MurmurUITests")
  end

  desc "Frame screenshots with device frames"
  lane :add_frames do
    frameit(
      path: "./screenshots",
      silver: true
    )
  end

  desc "Generate, resize, and frame screenshots for App Store"
  lane :prepare_screenshots do
    screenshots
    resize_screenshots
    add_frames
  end

  desc "Resize iPhone screenshots for App Store Connect"
  lane :resize_screenshots do
    # Resize >6.7" iPhone captures (1320x2868) down to App Store requirement (1284x2778)
    screenshot_dir = File.expand_path("../screenshots", __dir__)
    files = Dir.glob("#{screenshot_dir}/**/iPhone*.png").reject { |path| path.include?("/framed/") }

    if files.empty?
      UI.error("No iPhone screenshots found in #{screenshot_dir}")
      next
    end

    target_width = 1284
    target_height = 2778
    resized_count = 0

    files.each do |file|
      info = `sips -g pixelWidth -g pixelHeight #{Shellwords.escape(file)}`
      width = info[/pixelWidth:\s+(\d+)/, 1].to_i
      height = info[/pixelHeight:\s+(\d+)/, 1].to_i

      if width.zero? || height.zero?
        UI.error("Unable to read dimensions for #{file}")
        next
      end

      if width <= target_width && height <= target_height
        UI.message("Skipping #{File.basename(file)} (#{width}x#{height}) - already within target size")
        next
      end

      UI.message("Resizing #{File.basename(file)} from #{width}x#{height} to #{target_width}x#{target_height}")
      sh("sips", "-z", target_height.to_s, target_width.to_s, file)
      resized_count += 1
    end

    if resized_count.positive?
      UI.success("Resized #{resized_count} iPhone screenshot#{resized_count == 1 ? '' : 's'} to #{target_width}x#{target_height}")
    else
      UI.message("No screenshots required resizing")
    end
  end
end
